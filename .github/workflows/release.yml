name: Build and Release

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: "Version tag (e.g., 1.0.0 or 1.0.0-rc.1)"
        required: true
        default: "1.0.0"
      branch:
        description: "Branch to build from (e.g., main, dev)"
        required: true
        default: "main"

permissions:
  contents: write

jobs:
  build:
    name: Build ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux
            executable: deezy
            artifact_name: deezy-linux-x64
          - os: ubuntu-22.04-arm
            platform: linux-arm64
            executable: deezy
            artifact_name: deezy-linux-arm64
          - os: macos-latest
            platform: macos
            executable: deezy
            artifact_name: deezy-macos-x64
          - os: macos-14
            platform: macos-arm64
            executable: deezy
            artifact_name: deezy-macos-arm64
          - os: windows-latest
            platform: windows
            executable: deezy.exe
            artifact_name: deezy-windows-x64.exe

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.branch || github.ref_name }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          version: "latest"

      - name: Install dependencies
        run: uv sync --group dev

      - name: Run tests
        run: uv run pytest
        env:
          PYTHONPATH: ${{ github.workspace }}

      - name: Build executable
        run: uv run python build_executables.py

      - name: Verify build output
        shell: bash
        run: |
          if [ "${{ matrix.platform }}" == "windows" ]; then
            ls -la pyinstaller_build/dist/
            if [ ! -f "pyinstaller_build/dist/deezy.exe" ]; then
              echo "Build failed: deezy.exe not found"
              exit 1
            fi
          else
            ls -la pyinstaller_build/dist/
            if [ ! -f "pyinstaller_build/dist/deezy" ]; then
              echo "Build failed: deezy executable not found"
              exit 1
            fi
          fi

      - name: Create ZIP archive (Windows)
        if: matrix.platform == 'windows'
        shell: pwsh
        run: |
          cd pyinstaller_build/dist/
          Compress-Archive -Path deezy.exe -DestinationPath ../../${{ matrix.artifact_name }}.zip -CompressionLevel Optimal
          cd ../..
          Compress-Archive -Path pyinstaller_build/bundled_mode/deezy/* -DestinationPath bundle-${{ matrix.artifact_name }}.zip -CompressionLevel Optimal

      - name: Create ZIP archive (Unix)
        if: matrix.platform != 'windows'
        shell: bash
        run: |
          cd pyinstaller_build/dist/
          zip -9 ../../${{ matrix.artifact_name }}.zip deezy
          cd ../..
          cd pyinstaller_build/bundled_mode/deezy/
          zip -r ../../../bundle-${{ matrix.artifact_name }}.zip .

      - name: Upload build artifact (onefile)
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: ${{ matrix.artifact_name }}.zip
          retention-days: 7

      - name: Upload build artifact (bundle)
        uses: actions/upload-artifact@v4
        with:
          name: bundle-${{ matrix.artifact_name }}
          path: bundle-${{ matrix.artifact_name }}.zip
          retention-days: 7

  release:
    name: Create Release Assets
    needs: build
    runs-on: ubuntu-latest
    if: (github.event_name == 'release' && github.event.action == 'published' && !github.event.release.prerelease && !contains(github.event.release.tag_name, '-rc') && github.event.release.target_commitish == 'main') || (github.event_name == 'workflow_dispatch')
    permissions:
      contents: write

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Display structure of downloaded files
        run: ls -R

      - name: Upload release assets
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          RELEASE_TAG: ${{ github.event.release.tag_name || github.event.inputs.version }}
        run: |
          set -e  # Exit on any error

          echo "=== File sizes ==="
          ls -lh ./*/*.zip

          echo "=== Uploading Linux x64 ZIP ==="
          gh release upload "$RELEASE_TAG" \
            ./deezy-linux-x64/deezy-linux-x64.zip \
            --repo ${{ github.repository }} \
            --clobber
          echo "âœ… Linux x64 ZIP uploaded successfully"

          echo "=== Uploading Linux arm64 ZIP ==="
          gh release upload "$RELEASE_TAG" \
            ./deezy-linux-arm64/deezy-linux-arm64.zip \
            --repo ${{ github.repository }} \
            --clobber || echo "Warning: linux-arm64 zip not found or upload failed"
          echo "âœ… Linux arm64 ZIP uploaded"

          echo "=== Uploading Linux x64 Bundle ZIP ==="
          gh release upload "$RELEASE_TAG" \
            ./bundle-deezy-linux-x64/bundle-deezy-linux-x64.zip \
            --repo ${{ github.repository }} \
            --clobber || echo "Warning: linux x64 bundle not found or upload failed"
          echo "âœ… Linux x64 Bundle ZIP uploaded"

          echo "=== Uploading Linux arm64 Bundle ZIP ==="
          gh release upload "$RELEASE_TAG" \
            ./bundle-deezy-linux-arm64/bundle-deezy-linux-arm64.zip \
            --repo ${{ github.repository }} \
            --clobber || echo "Warning: linux arm64 bundle not found or upload failed"
          echo "âœ… Linux arm64 Bundle ZIP uploaded"

          echo "=== Uploading macOS x64 ZIP ==="
          gh release upload "$RELEASE_TAG" \
            ./deezy-macos-x64/deezy-macos-x64.zip \
            --repo ${{ github.repository }} \
            --clobber || echo "Warning: macos-x64 zip not found or upload failed"
          echo "âœ… macOS x64 ZIP uploaded"

          echo "=== Uploading macOS arm64 ZIP ==="
          gh release upload "$RELEASE_TAG" \
            ./deezy-macos-arm64/deezy-macos-arm64.zip \
            --repo ${{ github.repository }} \
            --clobber || echo "Warning: macos-arm64 zip not found or upload failed"
          echo "âœ… macOS arm64 ZIP uploaded"

          echo "=== Uploading macOS x64 Bundle ZIP ==="
          gh release upload "$RELEASE_TAG" \
            ./bundle-deezy-macos-x64/bundle-deezy-macos-x64.zip \
            --repo ${{ github.repository }} \
            --clobber || echo "Warning: macos x64 bundle not found or upload failed"
          echo "âœ… macOS x64 Bundle ZIP uploaded"

          echo "=== Uploading macOS arm64 Bundle ZIP ==="
          gh release upload "$RELEASE_TAG" \
            ./bundle-deezy-macos-arm64/bundle-deezy-macos-arm64.zip \
            --repo ${{ github.repository }} \
            --clobber || echo "Warning: macos arm64 bundle not found or upload failed"
          echo "âœ… macOS arm64 Bundle ZIP uploaded"

          echo "=== Uploading Windows ZIP ==="
          gh release upload "$RELEASE_TAG" \
            ./deezy-windows-x64.exe/deezy-windows-x64.exe.zip \
            --repo ${{ github.repository }} \
            --clobber || echo "Warning: windows zip not found or upload failed"
          echo "âœ… Windows ZIP uploaded"

          echo "=== Uploading Windows Bundle ZIP ==="
          gh release upload "$RELEASE_TAG" \
            ./bundle-deezy-windows-x64.exe/bundle-deezy-windows-x64.exe.zip \
            --repo ${{ github.repository }} \
            --clobber || echo "Warning: windows bundle not found or upload failed"
          echo "âœ… Windows Bundle ZIP uploaded"

          echo "ðŸŽ‰ All ZIP archives uploaded successfully!"

          echo "=== Final Release Assets ==="
          gh release view "$RELEASE_TAG" --repo ${{ github.repository }}
